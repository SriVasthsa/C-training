1. *Default Constructor:*
   Write a class Student with a default constructor that initializes the student's name to "Unknown" and age to 0. Add a method display to print the student's details.

#include <iostream>
using namespace std;
class Student 
{
    public:
    string name;
    int age;
    Student() 
	{
            name = "Unknown";
            age = 0;
        }
    void display() 
	{
            cout << "Name: " << name << endl;
            cout << "Age: " << age << endl;
        }
};

int main() 
{
    Student student1;
    cout << "Student details:" << endl;
    student1.display();
    return 0;
}

2. *Parameterized Constructor:*
   Write a class Rectangle with a parameterized constructor that initializes the length and width. Add a method area that returns the area of the rectangle.

#include <iostream>
using namespace std;
struct Rectangle 
{
    double length;
    double width;
    Rectangle(double l, double w) {
        length = l;
        width = w;
    }
    double area() const {
        return length * width;
    }
};
int main() 
{
    Rectangle rect(5.0, 3.0);
    std::cout << "Area of the rectangle: " << rect.area() << std::endl;
    return 0;
}

3. *Multiple Constructors:*
   Write a class Book that has both a default constructor and a parameterized constructor. The default constructor should set the title to "Unknown" and the number of pages to 0. The parameterized constructor should initialize the title and pages with given values.

#include<iostream>
#include<string>
class Book 
{
    std::string title;
    int pages;
    public:
    Book() 
    {
        title = "Unknown";
        pages = 0;
    }
    Book(std::string t, int p) {
        title = t;
        pages = p;
    }
    void display() {
        std::cout << "Title: " << title << ", Pages: " << pages << std::endl;
    }
};
int main() 
{
    Book book1;
    book1.display();
    Book book2("The Great Gatsby", 555);
    book2.display(); 
    return 0;
}

4 *Constructor Overloading:*
   Write a class Complex that represents complex numbers. Implement a default constructor that sets both real and imaginary parts to 0, and a parameterized constructor that takes two arguments to initialize the real and imaginary parts.

#include <iostream>
using namespace std;
class Complex 
{
    public:
    double real;
    double imaginary;
    Complex() 
    {
        real = 0.0;
        imaginary = 0.0;
    }
    Complex(double r, double i) 
    {
        real = r;
        imaginary = i;
    }
    void display() const 
    {
        cout << "Complex number: " << real << " + " << imaginary << "i" << endl;
    }
};
int main() 
{
    Complex c1;
    cout << "Using default constructor:" << endl;
    c1.display();
    return 0;
}

5. *Pointer to an Integer:*
   Write a function increment that takes a pointer to an integer and increments its value by 1. Demonstrate the function in the main program

#include <iostream>
using namespace std;
class Circle {
private:
    double radius;
public:
    Circle(double r) {
        radius = r;
    }
    double area() {
        return 3.14 * radius * radius;
    }
};
int main() 
{
    Circle *ptrCircle = new Circle(5.0);
    double circleArea = ptrCircle->area();
    cout << "Area of the circle: " << circleArea << endl;
    delete ptrCircle;
    return 0;
}

Program 6:
*Pointer to a Class:*
    Write a class Circle with a method area. Create a pointer to an object of this class and call the area method using the pointer.
#include<iostream>
using namespace std;
class circle
{
    private:
    double radius;
    public:
    circle(double r)
    {
        radius = r;
    }
    double area()
    {
        return 3.14*radius *radius;
    }
};
int main()
{
    circle *ptrcircle = new circle (5.0);
    double circlearea = ptrcircle->area();
    cout<<"area of the circle:"<<circlearea<<endl;
    delete ptrcircle;
    return 0;
}
Program 7:
Array of Pointers:*
    Write a program that creates an array of pointers to integers. Initialize the array with values and print them using the pointers.
#include<iostream>
using namespace std;
int main() {
    const int SIZE = 5;
    int *ptrArray[SIZE];
    int values[SIZE] = {20, 40, 60, 80, 100};
     for (int i = 0; i < SIZE; ++i) {
        ptrArray[i] = &values[i];
    }
cout << "Values in the array using pointers:" << endl;
    for (int i = 0; i < SIZE; ++i) {
        cout << *ptrArray[i] << " ";
    }
    cout << endl;

return 0;
}
Program 8:
*Pointer to an Array:*
    Write a function that takes a pointer to an array of integers and the size of the array. The function should print all elements of the array.

#include <iostream>
using namespace std;

// Function to print elements of an array
void printArray(int *arr, int size) {
    for (int i = 0; i < size; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    const int SIZE = 5;
    int values[SIZE] = {10, 20, 30, 40, 50};

    // Call the printArray function
    printArray(values, SIZE);

    return 0;
}
Program 9:
*Dynamic Memory Allocation:*
    Write a program that dynamically allocates memory for an integer, assigns a value to it, and then frees the memory.
#include <iostream>
using namespace std;

int main() {
    // Dynamically allocate memory for an integer
    int* ptr = new int;

    // Assign a value to the dynamically allocated memory
    *ptr = 42;

    // Print the value
    cout << "Value: " << *ptr << endl;

    // Free the dynamically allocated memory
    delete ptr;

    return 0;
}

program 10:
*Reference to an Integer:*
    Write a function swap that takes two integer references and swaps their values. Demonstrate the function in the main program.
#include <iostream>
using namespace std;
void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
int main() {
    int num1 = 5, num2 = 10;
    swap(&num1, &num2);
    cout<<num1<<" "<<num2<<endl;
    return 0;
}

program 11:
*Reference to a Class Object:*
    Write a class Box with a method volume. Create an object of this class and a reference to this object. Call the volume method using the reference.
#include <iostream>
using namespace std;
class Box{
    public:
    void volume()
    {
        std::cout << "volume method called" << std::endl;
    }
};
int main() 
{
    Box b;
    Box &ref=b;
    std::cout<<ref.volume()<< std::endl;
    return 0;
}

program 12:
*Returning Reference from a Function:*
    Write a function that takes an array of integers and returns a reference to the largest element. Demonstrate the function in the main program.
#include <iostream>
using namespace std;
int& findLargest(int arr[], int size) {
    int maxIndex = 0;
    for (int i = 1; i < size; ++i) {
        if (arr[i] > arr[maxIndex]) {
            maxIndex = i;
        }
    }
    return arr[maxIndex];
}
int main() {
    int arr[] = {12, 54, 8, 23, 67, 42};
    int size = sizeof(arr) / sizeof(arr[0]);
    int &largest = findLargest(arr, size);
    std::cout << "The largest element in the array is: " << largest << std::endl;
    largest = 100;
    std::cout << "Array after modifying largest element: ";
    for (int i = 0; i < size; ++i) {
        std::cout << arr[i] << " ";
    }
    std::cout << std::endl;
    return 0;
}

program 13:
*Pass by Value:*
    Write a function addTen that takes an integer by value and adds 10 to it. Demonstrate how the original value is not changed after calling the function.
#include <iostream>
using namespace std;
void addTen(int num) {
    num += 10;
    std::cout << "Inside function: num = " << num << std::endl;
}
int main() {
    int number = 5;
    std::cout << "Original value of number: " << number << std::endl;
    addTen(number);
    std::cout << "Value of number after function call: " << number << std::endl;
    return 0;
}

program 14:
*Pass by Reference:*
    Write a function addTenRef that takes an integer by reference and adds 10 to it. Demonstrate how the original value is changed after calling the function.
#include <iostream>
void addTenRef(int &num) {
    num += 10;
}
int main() {
    int number = 5;
    std::cout << "Original value of number: " << number << std::endl;
    addTenRef(number);
    std::cout << "Value of number after function call: " << number << std::endl;
    return 0;
}

program 15:
*Function Returning a Reference:*
    Write a function that returns a reference to a static variable. Modify the returned value in the main function and print it.

#include <iostream>
int& staticVariable() {
    static int num = 5;
    return num;
}
int main() {
    int &ref = staticVariable();
    std::cout << "Original value of static variable: " << ref << std::endl;
    ref += 10;
    std::cout << "Modified value of static variable: " << ref << std::endl;
    return 0;
}


program 16:
*Passing Objects by Value and Reference:*
    Write a class Employee with attributes name and salary. Write two functions: one that takes an Employee object by value and another that takes an Employee object by reference. Modify the salary in both functions and demonstrate the difference in the main program.
#include <iostream>
#include <string>
class Employee {
private:
    std::string name;
    double salary;

public:
    Employee(std::string n, double s) : name(n), salary(s) {}
    std::string getName() const {
        return name;
    }
    double getSalary() const {
        return salary;
    }
    void modifySalaryByValue(double amount) {
        salary += amount;
    }
    void modifySalaryByReference(double &amount) {
        salary += amount;
    }
};
int main() {
    Employee emp("John Doe", 50000.0);
    std::cout << "Initial details:" << std::endl;
    std::cout << "Name: " << emp.getName() << std::endl;
    std::cout << "Salary: $" << emp.getSalary() << std::endl;
    double increaseByValue = 5000.0;
    emp.modifySalaryByValue(increaseByValue);
    std::cout << "\nAfter modifying salary by value:" << std::endl;
    std::cout << "Name: " << emp.getName() << std::endl;
    std::cout << "Salary: $" << emp.getSalary() << std::endl;
    double increaseByReference = 10000.0;
    emp.modifySalaryByReference(increaseByReference);
    std::cout << "\nAfter modifying salary by reference:" << std::endl;
    std::cout << "Name: " << emp.getName() << std::endl;
    std::cout << "Salary: $" << emp.getSalary() << std::endl;
    return 0;
}